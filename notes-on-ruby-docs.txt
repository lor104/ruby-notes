===Ruby Documentation===

Documentation is only useful when when you have a question about how a specific class, method or module works

Searching and finding answers is only the first step, when that answer is found, read the ruby docs on how it works and why

StackOverflow is a great resource to use, but the questions posed on there are usually too specific. Use this resource as a jumping off point to get to ruby docs rather than being the full answer itself

Don't read the ruby docs for fun, instead use as a dictionary. Look for:

 1. Arguments: What type of arguments does the method expect?
 2. Return Value: What type of object does it return?
 3. Operation: What does the method actually do?


 At the top of a doc, you'll see the:
 =Method Signature=

 This lists the arguments and the return values of the method
 Ruby method signatures follow this format:
 method_name(required_argument [,optional_argument]) → return_types


 For stringindex, the format follows:
 Index(substring [, offset] -> fixnum or nil

 Therefore, stringindex:
 Requires one argument, a string. There's an optional second argument. It returns a number or nil


Reading the description of how the method works will explain all the parts of the method:

"Returns the index of the first occurrence of the given substring or pattern (regexp) in str. Returns nil if not found. If the second parameter is present, it specifies the position in the string to begin the search."


 Patterns most doc descriptions follow:

 “If passed a single index, returns a substring of one character at that index.”

 “If pattern is a String, then its contents are used as the delimiter when splitting str.”

 “If the increment generates a “carry,” the character to the left of it is incremented.”

====ASSIGNMENT===
++Class: String++
  a string is an object that holds and manipulates a sequence of characters

String methods:
length
strip
split
start_with?

- string#length
    gives you the number of characters in a string
    argument = none
    return type = number (integer)
    string.length = #
      "tacos".length = 5

- string#strip
    removes the white space at the beginning or end of a string
    argument = none
    return type = new string
    string.strip = new_string
      "    tacos   ".strip = "tacos"

- string#split
    divides a string into substrings based on a delimiter, returning an array of strings
    argument = delimiter or nil
    return type = array
      "time for tacos".split = ["time", "for", "tacos"]

- string#start_with?
    returns true if the string starts with one of the arguments given
    argument = prefix of a string
    return type = boolean (ie true or false)
      "tacos".start_with?("tac") = true
      "tacos".start_with?("guac") = false


++Class: Array++
  An array is an ordered, integer-indexed collection of an object

Array methods:
first
delete_at
delete
pop

tacos = ["chicken", "pork", "beef", "veggie", "tofu"]

- array#first
    returns the first object of an array
    argument = none, or a number
    return type = object or nil, or an array
      tacos.first = "chicken"
      tacos.first(2) = ["chicken", "pork"]

- array#delete_at
    deletes the element at the specified index, returning that element or nil if the index is out of range
    argument = index value
    return = object, or nil
      tacos.delete_at(1) = "pork"
        tacos = ["chicken", "beef"]
      tacos.delete_at(4) = nil

-array#delete
    deletes all objects that are equal to the argument passed
    argument = object
    return type = item, or nil
      tacos.delete("pork") = "pork"
        tacos = ["chicken", "beef"]

- array#pop
    removes the last element from an array and returns it, or nil if the array is empty. If an number is given, it will delete that number of elements, starting from the last one
    argument = none, or a number
    return = object or nil, or an array
      tacos.pop = "tofu"
        tacos = ["chicken", "pork", "beef", "veggie"]
      tacos.pop(3) = ["beef", "veggie", "tofu"]
        tacos = ["chicken", "pork"]

++Class: Hash++
  A hash is a dictionary-like collection of keys and values
  Similar to arrays, where an array uses integers as an index value, hashes allow you to use an object type

tacos {
  :meat   => "chipotle chicken",
  :salsa  => "tomato",
  :cream  => "guacamole",
  :shell  => "soft"}

to_a
has_key?
has_value?

- hash#to_a
    converts hash to a nested array of [key, value] pairs
    argument = none
    return type = array
      tacos.to_a = [["meat","chipotle chicken"], ["salsa", "tomato"], ["cream", "guacamole"], ["shell", "soft"]]

- hash#has_key?
    returns true is the given key is present in the hash
    argument = key
    returns = boolean (true or false)
      tacos.has_key?(:meat) = true
      tacos.has_key?(:tortilla) = false

- hash#has_value?
    returns true is the given key is present in the hash
    argument = value
    returns = boolean (true or false)
      tacos.has_value?("chicken") = true        tacos.has_value?("beef") = false

++Class: File++
  a file is an abstraction of any file object accesible by the program

exist?
extname

tacos.rb

- File#exist?
    returns true if the filename exists
    argument = file_name
    returns = booleans (true or false)
      File.exist?("tacos.rb") = true

- File#extname
    returns the extension of a File
    argument = path of File
    returns = string
      File.extname("tacos.rb") = ".rb"
